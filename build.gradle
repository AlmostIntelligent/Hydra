import org.gradle.api.tasks.application.CreateStartScripts

configure(allprojects) {
	apply plugin: 'java'
	apply plugin: 'eclipse'

	group = 'org.gethydrated'

	sourceCompatibility=1.7
	targetCompatibility=1.7

	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	repositories { mavenCentral() }

	dependencies {
		compile 	"org.slf4j:slf4j-api:1.6.4"
		testCompile "junit:junit:4.10"
		testCompile "ch.qos.logback:logback-classic:1.0.1"
	}

	ext { mainClass = 'org.gethydrated.hydra.launcher.Launcher' }

	clean.dependsOn subprojects.collect { "$it.path:clean" }
}

configure(subprojects) { subproject ->
	configurations { jacoco //Configuration Group used by Sonar to provide Code Coverage using JaCoCo
	}

	dependencies {
		jacoco group: "org.jacoco", name: "org.jacoco.agent", version: "0.5.7.201204190339", classifier: "runtime"
	}

	jar {
		manifest.attributes['Implementation-Title'] = subproject.name
		manifest.attributes['Implementation-Version'] = subproject.version
	}
	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	test { jvmArgs "-javaagent:${configurations.jacoco.asPath}=destfile=${rootProject.buildDir}/coverage-results/jacoco.exec,includes=org.gethydrated.hydra.*,excludes=org.gethydrated.hydra.test.*" }

	archivesBaseName = 'hydra-' + subproject.name

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

project("api") { description = 'Hydra API' }

project("launcher") {
	description = 'Hydra Launcher'
	jar {
		manifest.attributes['Main-Class'] = mainClass
	}

	dependencies {
		compile project(':core')
		compile "ch.qos.logback:logback-classic:1.0.1"
	}
}

project("core") {
	description = 'Hydra Core'

	dependencies { compile project(':api') }

}

project("cli-service") {
	description = 'Hydra CLI'

	dependencies { compile project(':api') }
}

configure(rootProject) {
	configurations { jacocoant }

	dependencies {
		jacocoant group: "org.jacoco", name: "org.jacoco.ant", version: "0.5.7.201204190339"
	}

	task generateCoverageReport << {
		ant {
			taskdef(name:'jacocoreport', classname: 'org.jacoco.ant.ReportTask') { classpath path: "${configurations.jacocoant.asPath}" }

			mkdir dir: "${rootProject.buildDir}/reports/coverage"
			mkdir dir: "${rootProject.buildDir}/reports/coverage-xml"

			jacocoreport {
				executiondata {
					ant.file file: "${rootProject.buildDir}/coverage-results/jacoco.exec"
				}

				structure(name: "Hydra Coverage Reports") {

					classfiles {
						files(subprojects.collect { project ->
							fileset dir: "${project.projectDir.path}/build/classes/main"
						}) }

					sourcefiles(encoding: 'UTF-8') {
						files(subprojects.collect { project ->
							fileset dir: "${project.projectDir.path}/src/main/java"
						}) }

				}

				xml  destfile: "${rootProject.buildDir}/reports/coverage-xml/jacoco.xml"
				html destdir: "${rootProject.buildDir}/reports/coverage"
			}
		}
	}
	description = 'Hydra'

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	task api(type: Javadoc) {
		group = 'Documentation'
		description = 'Generates aggregated Javadoc API documentation.'
		title = "${rootProject.description} ${version} API"
		options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
		options.author = true
		options.header = rootProject.description
		source subprojects.collect { project ->
			project.sourceSets.main.allJava
		}
		destinationDir = new File(buildDir, "api")
		classpath = files(subprojects.collect { project ->
			project.sourceSets.main.compileClasspath
		})
		maxMemory = '1024m'
	}

	task docsZip(type: Zip, dependsOn: api) {
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference documentation."
		from api { into "api" }
	}

	task docsTar(type: Tar, dependsOn: api) {
		classifier = 'docs'
		description = "Builds -${classifier} archive containing api and reference documentation."
		compression = Compression.GZIP
		from api { into "api" }
	}

	ext.prepareSource = copySpec {
		into( 'sources' ) {
			from ( rootProject.projectDir ) {
				exclude( '.git' )
				exclude( '.gitignore' )
				exclude( '**/.classpath' )
				exclude( '**/.project' )
				exclude( '.DS_STore' )
				exclude( 'Readme.md')
				exclude( '**/.gradle/**' )
				exclude( '**/bin/**' )
				exclude( '**/build/**' )
				exclude( '**/.settings/**' )
			}
		}
	}

	task srcZip(type: Zip, dependsOn: api) {
		classifier = 'src'
		description = "Builds -${classifier} archive containing project sources."
		with project.prepareSource
	}

	task srcTar(type: Tar, dependsOn: api) {
		classifier = 'src'
		description = "Builds -${classifier} archive containing project sources."
		compression = Compression.GZIP
		with project.prepareSource
	}

	task prepareDist(type: Copy, dependsOn: [subprojects*.build, docsZip]) {
		description = 'Prepare release bundle'
		destinationDir = "$buildDir/assemble" as File

		from("src/dist")

		from(zipTree(docsZip.archivePath)) { into "docs" }

		with project.prepareSource

		subprojects.each { subproject ->
			if(subproject.name.contains("service")) {
				//TODO: create system service deployment
			} else {
				into ("/lib") {
					from subproject.jar
					from subproject.configurations.runtime
				}
			}
		}
	}

	task generateScript(type: CreateStartScripts, dependsOn: prepareDist) {
		description = 'Generate startup scripts'
		applicationName = "hydra"
		mainClassName = mainClass
		outputDir = file("$buildDir/script")
		classpath = fileTree(dir: "$buildDir/assemble/lib")
	}

	task finishDist(type: Copy, dependsOn: [prepareDist, generateScript]) {
		description = 'Finish release preparations'
		destinationDir = "$buildDir/assemble" as File
		from ("$buildDir/script") { into("bin") }
	}

	task distZip( type: Zip, dependsOn: finishDist) {
		description = "Build release bundle in ZIP format"
		from ("$buildDir/assemble")

	}

	task distTar( type: Tar, dependsOn: finishDist) {
		description = "Build release bundle in GZIP format"
		compression = Compression.GZIP
		from ("$buildDir/assemble")
	}

	artifacts {
		archives distZip
		archives distTar
		archives docsZip
		archives docsTar
		archives srcZip
		archives srcTar
	}

	task wrapper(type: Wrapper) {
		description = 'Generates gradlew[.bat] scripts'
		gradleVersion = '1.0-rc-1'
	}
}
