import org.apache.tools.ant.filters.*
import org.gradle.ext.BuildTypes

defaultTasks 'assemble'
apply plugin: 'java-base'
archivesBaseName = 'hydra'

project.sourceCompatibility = 1.7
project.targetCompatibility = 1.7

extensions.buildTypes = new BuildTypes(project)

buildTypes {
    testBuild "assemble", "test"
    packageBuild "clean", "assemble", "test", "buildDists"
    promotionBuild "clean", "assemble", "test", "buildDists", "uploadArchives"
}

apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/idea.gradle'

allprojects {

	group = 'org.gethydrated.hydra'

	repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects { subproject ->
    version = rootProject.version
    apply plugin: 'java'

    test {
        ignoreFailures = true
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }
    }
}

configurations {
    runtime {
        visible = false
    }
    modules {
        visible = false
    }
    services {
        visible = false
    }
}

dependencies {
    runtime project(':launcher')
    runtime libraries.vfs
    modules libraries.modules
    services project(':sample-chat-service')
}

evaluationDependsOn ':dist'












/*
configure(subprojects) { subproject ->	
	jar {
		manifest.attributes['Implementation-Title'] = subproject.name
		manifest.attributes['Implementation-Version'] = subproject.version
	}

	test {
		ignoreFailures=true
        // show standard out and standard error of the test JVM(s) on the console
        //testLogging.showStandardStreams = true

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

	}
	archivesBaseName = 'hydra-' + subproject.name
}

project("api") {
    apply plugin: 'maven'
    description = 'Hydra API'
}

project("launcher") {
	description = 'Hydra Launcher'
	jar {
		manifest.attributes['Main-Class'] = mainClass
	}

	dependencies {
		compile project(':core')
		compile "ch.qos.logback:logback-classic:1.0.7"
	}
}

project("actors") {
    apply plugin: 'maven'
	description = 'Hydra Actor implementation'
	
	dependencies {
		compile project(':api')
        compile project(':config')
        compile "com.google.guava:guava:13.0.1"
	}
}

project("core") {
    apply plugin: 'maven'
	description = 'Hydra Core'

	dependencies { 
		compile project(':api') 
		compile project(':actors')
        compile project(':config')
        compile project(':util')
        compile 'com.fasterxml.jackson.core:jackson-core:2.1.4'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.1.4'
        compile 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.1.4'
        compile "org.eclipse.jetty:jetty-server:8.1.8.v20121106"   //Workaround for jetty dependency copying.
        compile "io.netty:netty-all:4.0.0.CR1"
	}

    task copyVersionTemplate(type: Copy) {
        from("src/main/template")
        into("src/main/resources/org/gethydrated/hydra/core")
        filter(ReplaceTokens, tokens: [version: project.version])
        outputs.upToDateWhen { false }
    }

    ideaModule.dependsOn(copyVersionTemplate)
    compileJava.dependsOn(copyVersionTemplate)
}

project("config") {
    apply plugin: 'maven'
    description = 'Hydra configurations'

    dependencies {
        compile project(':api')
        compile project(':util')
    }
}

project("jetty-service") {
    description = 'Hydra Jetty http server'

    dependencies {
        compile project(':api')
        compile "org.eclipse.jetty:jetty-server:8.1.8.v20121106"
    }
}

project("sample-chat-service") {
    description = 'Sample Distributed Chat'

    dependencies {
        compile project(':api')
    }
}

project("util") {
    apply plugin: 'maven'
    description = 'Hydra support classes'
}

configure(rootProject) {
	configurations { jacocoant }

	description = 'Hydra'	

	task wrapper(type: Wrapper) {
		description = 'Generates gradlew[.bat] scripts'
		gradleVersion = '1.5'
	}
}
*/