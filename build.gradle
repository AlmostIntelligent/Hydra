import org.gradle.api.tasks.application.CreateStartScripts

configure(allprojects) {
	apply plugin: 'java'
	apply plugin: 'eclipse'

	group = 'org.gethydrated'

	sourceCompatibility=1.7
	targetCompatibility=1.7

	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	repositories { mavenCentral() }

	dependencies {
		compile 	"org.slf4j:slf4j-api:1.6.4"
		testCompile "junit:junit:4.10"
	}

	ext { mainClass = 'org.gethydrated.hydra.launcher.Launcher' }
}

configure(subprojects) { subproject ->
	jar {
		manifest.attributes['Implementation-Title'] = subproject.name
		manifest.attributes['Implementation-Version'] = subproject.version
	}
	task sourcesJar(type: Jar, dependsOn:classes) {
		classifier = 'sources'
		from sourceSets.main.allJava
	}

	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	artifacts {
		archives sourcesJar
		archives javadocJar
	}
}

project("hydra-api") { description = 'Hydra API' }

project("hydra-launcher") {
	description = 'Hydra Launcher'
	jar {
		manifest.attributes['Main-Class'] = mainClass
	}

	dependencies { compile project(':hydra-core') }
}

project("hydra-core") {
	description = 'Hydra Core'

	dependencies { compile project(':hydra-api') }
}

project("hydra-cli") {
	description = 'Hydra CLI'

	dependencies { compile project(':hydra-api') }
}

configure(rootProject) {
	description = 'Hydra'

	// don't publish the default jar for the root project
	configurations.archives.artifacts.clear()

	task prepareDist(type: Copy) {
		description = 'Prepare release bundle'
		destinationDir = "$buildDir/assemble" as File
		subprojects.each { subproject ->
			into ("/lib") {
				from subproject.jar
				from subproject.configurations.runtime
			}
		}
	}

	task generateScript(type: CreateStartScripts, dependsOn: prepareDist) {
		description = 'Generate startup scripts'
		applicationName = "hydra"
		mainClassName = mainClass
		outputDir = file("$buildDir/script")
		classpath = fileTree(dir: "$buildDir/assemble/lib")
	}

	task finishDist(type: Copy, dependsOn: [prepareDist, generateScript]) {
		description = 'Finish release preparations'
		destinationDir = "$buildDir/assemble" as File
		from ("$buildDir/script") { into("bin") }
	}

	task distZip( type: Zip, dependsOn: finishDist) {
		description = "Build release bundle in ZIP format"
		from ("$buildDir/assemble")

	}

	task distTar( type: Tar, dependsOn: finishDist) {
		description = "Build release bundle in GZIP format"
		compression = Compression.GZIP
		from ("$buildDir/assemble")
	}

	task distFull() {
		description = 'Build release bundle in ZIP and GZIP formats'
		dependsOn([distZip, distTar])
	}

	task wrapper(type: Wrapper) {
		description = 'Generates gradlew[.bat] scripts'
		gradleVersion = '1.0-rc-1'
	}
}