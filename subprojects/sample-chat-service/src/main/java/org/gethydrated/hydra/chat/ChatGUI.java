/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.gethydrated.hydra.chat;

import org.gethydrated.hydra.api.HydraException;
import org.gethydrated.hydra.api.service.SID;
import org.gethydrated.hydra.api.service.ServiceContext;
import org.gethydrated.hydra.api.service.USID;
import org.gethydrated.hydra.chat.messages.Message;
import org.gethydrated.hydra.chat.messages.NewClient;
import org.gethydrated.hydra.chat.messages.Renamed;

import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.*;

/**
 *
 * @author Chris
 */
public class ChatGUI extends javax.swing.JFrame {

    /**
     * Creates new form ChatGUI
     * @param context
     */
    public ChatGUI(final ServiceContext context) {
        this.context = context;
        this.users = new HashMap<>();
        this.users.put(context.getSelf().getUSID(), context.getSelf().getUSID().toString());
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    context.stopService(context.getSelf());
                } catch (HydraException e1) {
                    e1.printStackTrace();
                }
            }
        });
        initComponents();
        updateUsers();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnSend = new javax.swing.JButton();
        input = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hydra Distributed Chat");
        setName("Hydra Distributed Chat"); // NOI18N
        setResizable(false);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                inputKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(userList);

        jLabel1.setText("Connected Users:");

        chat.setEditable(false);
        chat.setColumns(20);
        chat.setLineWrap(true);
        chat.setRows(5);
        jScrollPane3.setViewportView(chat);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPane3)
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnSend, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jScrollPane1))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnSend))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void inputKeyPressed(java.awt.event.KeyEvent evt) {
        if(evt.getKeyCode() == KeyEvent.VK_ENTER) {
            handleInput();
        }
    }

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {
        handleInput();
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnSend;
    private javax.swing.JTextArea chat;
    private javax.swing.JTextField input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList userList;
    // End of variables declaration

    private ServiceContext context;

    private HashMap<USID, String> users;

    private void handleInput() {
        String s = input.getText().trim();
        input.setText("");
        if(!s.isEmpty()) {
            if(!handleCommands(s)) {
                handleInput(context.getSelf(), s);
                for (USID usid : users.keySet()) {
                    if (!usid.equals(context.getSelf().getUSID())) {
                        SID sid = context.getService(usid);
                        sid.tell(new Message(context.getSelf().getUSID(), s), context.getSelf());
                    }
                }
            }
        }
    }

    private boolean handleCommands(String in) {
        if(in.startsWith("/name ") && in.length() > 6) {
            renameUser(context.getSelf(), in.substring(6, in.length()));
            for(USID usid : users.keySet()) {
                if(!usid.equals(context.getSelf().getUSID())) {
                    SID sid = context.getService(usid);
                    sid.tell(new Renamed(context.getSelf().getUSID(), in.substring(6, in.length())), context.getSelf());
                }
            }
            return true;
        }
        return false;
    }

    public void renameUser(SID sid, String name) {
        if (name != null) {
            if(users.containsKey(sid.getUSID())) {
                users.put(sid.getUSID(), name);
            }
            updateUsers();
        }
    }

    public void handleInput(SID from, String input) {
        chat.append("["+users.get(from.getUSID())+"] " + input + "\n");
    }

    private void updateUsers() {
        List<String> names = new LinkedList(users.values());
        Collections.sort(names);
        userList.setListData(names.toArray());
    }

    public void addClient(SID sid) {
        if(!users.containsKey(sid.getUSID())) {
            users.put(sid.getUSID(), sid.getUSID().toString());
            updateUsers();
            context.monitor(context.getSelf(), sid);
            sid.tell(new NewClient(context.getSelf().getUSID()), context.getSelf());
            sid.tell(new Renamed(context.getSelf().getUSID(), users.get(context.getSelf().getUSID())), context.getSelf());
        }
    }

    public void removeClient(SID sid) {
        if(users.containsKey(sid.getUSID())) {
            users.remove(sid.getUSID());
            context.unmonitor(context.getSelf(), sid);
            updateUsers();
        }
    }

    public void removeAll(final UUID uuid) {
        Iterator<USID> it = users.keySet().iterator();
        while (it.hasNext()) {
            if (it.next().getNodeId().equals(uuid)) {
                it.remove();
            }
        }
        updateUsers();
    }
}
